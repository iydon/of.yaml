---
openfoam: [3.0.x]
version: 0.11.0
order:
    - meta
    - foam
    - static
    - other
---
"0":
    include:
        fixedInlet:
            FoamFile: null
            inlet:
                type: fixedValue
                value: $internalField
        front_and_back_and_tunnel:
            FoamFile: null
            tunnel:
                type: slip
            front_and_back:
                type: empty
        initialConditions:
            FoamFile: null
            flowVelocity: (11.176 0 0)  # 25 mph
            pressure: 0
            freestreamNut: 0.14
    nut:
        FoamFile: &FoamFile
            version: 2.0
            format: ascii
            class: volScalarField
            object: nut
        dimensions: "[0 2 -1 0 0 0 0]"
        internalField: uniform 0.14
        boundaryField:
            front_and_back:
                type: empty
            inlet:
                type: freestream
                freestreamValue: uniform 0.14
                value: uniform 0.14
            tunnel:
                type: nutUSpaldingWallFunction
                Cmu: 0.09
                kappa: 0.41
                E: 9.8
                value: uniform 0
            outlet:
                type: freestream
                freestreamValue: uniform 0.14
                value: uniform 0.14
            body:
                type: nutUSpaldingWallFunction
                Cmu: 0.09
                kappa: 0.41
                E: 9.8
                value: uniform 0
            baffle:
                type: cyclic
            baffleother:
                type: cyclic
    nuTilda:
        FoamFile:
            class: volScalarField
            object: nuTilda
            <<: *FoamFile
        dimensions: "[0 2 -1 0 0 0 0]"
        internalField: uniform 0.14
        boundaryField:
            front_and_back:
                type: empty
            inlet:
                type: freestream
                freestreamValue: uniform 0.14
                value: uniform 0.14
            tunnel:
                type: fixedValue
                value: uniform 0
            outlet:
                type: freestream
                freestreamValue: uniform 0.14
                value: uniform 0.14
            body:
                type: fixedValue
                value: uniform 0
            baffle:
                type: cyclic
            baffleother:
                type: cyclic
    p:
        FoamFile:
            class: volScalarField
            object: p
            <<: *FoamFile
        dimensions: "[0 2 -2 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            front_and_back:
                type: empty
            inlet:
                type: zeroGradient
            tunnel:
                type: slip
            outlet:
                type: fixedValue
                value: uniform 0
            body:
                type: zeroGradient
            baffle:
                type: fixedJump
                patchType: cyclic
                jump: uniform -800
                value: uniform 0
            baffleother:
                type: fixedJump
                patchType: cyclic
                value: uniform 0
    U:
        FoamFile:
            class: volVectorField
            object: U
            <<: *FoamFile
        dimensions: "[0 1 -1 0 0 0 0]"
        internalField: uniform (11.176 0 0)
        boundaryField:
            front_and_back:
                type: empty
            inlet:
                type: fixedValue
                value: uniform (11.176 0 0)
            tunnel:
                type: slip
            outlet:
                type: inletOutlet
                inletValue: uniform (0 0 0)
                value: uniform (11.176 0 0)
            body:
                type: fixedValue
                value: uniform (0 0 0)
            baffle:
                type: cyclic
            baffleother:
                type: cyclic
constant:
    transportProperties:
        FoamFile:
            class: dictionary
            object: transportProperties
            <<: *FoamFile
        transportModel: Newtonian
        nu: "[0 2 -1 0 0 0 0] 1.568e-05"
    turbulenceProperties:
        FoamFile:
            class: dictionary
            object: turbulenceProperties
            <<: *FoamFile
        simulationType: RAS
        RAS:
            # RASModel: kEspilon
            RASModel: SpalartAllmaras
            # RASModel: kOmegaSST
            turbulence: on
            printCoeffs: on
system:
    baffleDict:
        FoamFile:
            class: dictionary
            object: createBafflesDict
            <<: *FoamFile
        internalFacesOnly: true
        baffles:
            baffleFaces:
                type: faceZone
                zoneName: baffle
                flip: false
                patches:
                    master:
                        name: baffle
                        type: fixedJump
                        patchType: cyclic
                        neighbourPatch: baffleother
                        patchFields:
                            nut:
                                type: cyclic
                            nuTilda:
                                type: cyclic
                            p:
                                type: fixedJump
                                patchType: cyclic
                                value: uniform 0
                                jump: uniform -800
                            U:
                                type: cyclic
                    slave:
                        name: baffleother
                        type: fixedJump
                        patchType: cyclic
                        neighbourPatch: baffle
                        patchFields:
                            nut:
                                type: cyclic
                            nuTilda:
                                type: cyclic
                            p:
                                type: fixedJump
                                patchType: cyclic
                                value: uniform 0
                            U:
                                type: cyclic
    changeDictionaryDict:
        FoamFile:
            class: dictionary
            object: changeDictionaryDict
            <<: *FoamFile
        dictionaryReplacement:
            boundary:
                tunnel:
                    type: wall
                    physicalType: wall
                body:
                    type: wall
                    physicalType: wall
                front_and_back:
                    type: empty
                    physicalType: empty
                baffle:
                    type: cyclic
                    physicalType: cyclic
    controlDict:
        FoamFile:
            class: dictionary
            object: controlDict
            <<: *FoamFile
        application: pimpleFoam
        startFrom: latestTime
        startTime: 0
        stopAt: endTime
        endTime: 5
        deltaT: 0.001
        writeControl: adjustableRunTime
        writeInterval: 0.01
        purgeWrite: 0
        writeFormat: binary
        writePrecision: 10
        writeCompression: off
        timeFormat: general
        timePrecision: 6
        runTimeModifiable: true
        adjustTimeStep: yes
        maxCo: 1
        # Added for force output.
        libs:
            - |
                "libforces.so"
        functions:
            wing:
                patches: (body)
                CofR: (0 0 0)
                outputControl: timeStep
                outputInterval: 50
                type: forces
                pName: p
                UName: U
                rhoName: rhoInf
                rhoInf: 1.18
                log: true
    fvSchemes:
        FoamFile:
            class: dictionary
            object: fvSchemes
            <<: *FoamFile
        ddtSchemes:
            default: Euler
        gradSchemes:
            default: Gauss linear
            grad(p): Gauss linear
            grad(U): Gauss linear
        divSchemes:
            default: none
            div(phi, U): Gauss upwind
            div(phi, nuTilda): Gauss upwind
            div((nuEff*dev2(T(grad(U))))): Gauss linear
        laplacianSchemes:
            default: Gauss linear limited corrected 0.5
        interpolationSchemes:
            default: linear
        snGradSchemes:
            default: corrected
        wallDist:
            method: meshWave
    fvSolution:
        FoamFile:
            class: dictionary
            object: fvSolution
            <<: *FoamFile
        solvers:
            pcorr: &pcorr
                solver: GAMG
                tolerance: 1e-6
                relTol: 0.001
                smoother: GaussSeidel
                nPreSweeps: 0
                nPostSweeps: 2
                cacheAgglomeration: true
                agglomerator: faceAreaPair
                nCellsInCoarsestLevel: 100
                mergeLevels: 1
            p: &p
                tolerance: 1e-6
                relTol: 0.001
                <<: *pcorr
            pFinal:
                tolerance: 1e-6
                relTol: 0.001
                <<: *p
            (U|nuTilda): &U
                solver: smoothSolver
                smoother: symGaussSeidel
                tolerance: 1e-09
                relTol: 0.001
            (U|nuTilda)Final:
                tolerance: 1e-09
                relTol: 0
                <<: *U
        PIMPLE:
            correctPhi: yes
            # nOuterCorrectors = 1, => PISO (set relaxations to 1).
            nOuterCorrectors: 1
            # Sufficient nCorrectors is necessary for stability and convergence!
            nCorrectors: 5
            nNonOrthogonalCorrectors: 1
            pRefCell: 0
            pRefValue: 0
        relaxationFactors:
            # These should be set to 1 when using PISO mode.
            fields:
                p: 1
            equations:
                (U|nuTilda): 1
                (U|nuTilda)Final: 1
        cache:
            grad(U): ''
---
-
    name: mesh.geo
    type: [embed, text]
    permission: null
    data: |
        //Gmsh

        body_width = 0.254;
        body_height = 1.778;
        body_tilt = 25*Pi/180;
        body_top_left_corner[] = {0,0,0};
        body_lc = body_width / 20;

        domain_size = 10*body_height;
        domain_lc = body_width;

        fan_height = 6*0.0254;
        fan_width = 32*0.0254;
        fan_lc = fan_width / 10;
        fan_separation = fan_width;


        ce = 0; // current entity ID.

        Function draw_rectangle
            // the outline of the rectangle is output from this function.
            // In: top_left_corner[] = {}; lc = ; W = ; H = ;
            pts[] = {};
            Point(ce++) = {top_left_corner[0], top_left_corner[1], 0, lc};
            pts[]+=ce;
            Point(ce++) = {top_left_corner[0], top_left_corner[1]-H, 0, lc};
            pts[]+=ce;
            Point(ce++) = {top_left_corner[0]+W, top_left_corner[1]-H, 0, lc};
            pts[]+=ce;
            Point(ce++) = {top_left_corner[0]+W, top_left_corner[1], 0, lc};
            pts[]+=ce;
            lns[] = {};
            Line(ce++) = {pts[0], pts[1]}; lns[]+=ce;
            Line(ce++) = {pts[1], pts[2]}; lns[]+=ce;
            Line(ce++) = {pts[2], pts[3]}; lns[]+=ce;
            Line(ce++) = {pts[3], pts[0]}; lns[]+=ce;
        Return

        Function rotate_lines
            // In: lns[] = {}; rotation_center[] = {}; rotation = ;
            If ( rotation > 0 )
                Rotate{ {0,0,1}, { rotation_center[0], rotation_center[1], 0 }, rotation }
                {
                    Line{lns[]};
                }
            EndIf
        Return


        top_left_corner[] = body_top_left_corner[];
        W = body_width;
        H = body_height;
        lc = body_lc;
        Call draw_rectangle;
        rotation_center[] = body_top_left_corner[];
        rotation = body_tilt;
        Call rotate_lines;
        Line Loop(ce++) = {lns[]};
        body_loop = ce;

        top_left_corner[] = {body_width/2-fan_width/2, fan_separation, 0};
        W = fan_width;
        H = fan_height;
        lc = fan_lc;
        Call draw_rectangle;
        rotation_center[] = body_top_left_corner[];
        rotation = body_tilt;
        Call rotate_lines;
        Line Loop(ce++) = {lns[]};
        fan_loop = ce;

        top_left_corner[] = {-domain_size/2, domain_size/2, 0};
        W = domain_size;
        H = domain_size;
        lc = domain_lc;
        Call draw_rectangle;
        Line Loop(ce++) = {lns[]};
        domain_loop = ce;

        Plane Surface(ce++) = {domain_loop, body_loop, fan_loop};
        main_surface = ce;

        cell_depth = 0.1;
        new_entities[] =
        Extrude{0,0,cell_depth}
        {
            Surface{main_surface};
            Layers{1};
            Recombine;
        };

        Plane Surface(ce++) = {fan_loop};
        fan_surface = ce;

        cell_depth = 0.1;
        new_entities2[] =
        Extrude{0,0,cell_depth}
        {
            Surface{fan_surface};
            Layers{1};
            Recombine;
        };

        Physical Surface("body") = {new_entities[{6:9}]};
        Physical Surface("baffle") = {new_entities[10]};
        Physical Surface("inlet") = {new_entities[2]};
        Physical Surface("outlet") = {new_entities[4]};
        Physical Surface("front_and_back") = {main_surface, new_entities[0],
        new_entities2[0], fan_surface};
        Physical Surface("tunnel") = {new_entities[{3,5}]};
        Physical Volume("volume") = {new_entities[1], new_entities2[1]};
---
pipeline:
    - gmsh mesh.geo -3 -o mesh.msh
    - gmshToFoam mesh.msh
    - changeDictionary
    - foamUpgradeCyclics
    # - createBaffles -dict system/baffleDict -overwrite  # TODO: Cannot find patchField entry for cyclic baffle_half0
    - __app__
