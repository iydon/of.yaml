---
openfoam: [3.0.x]
version: 0.11.0
order:
    - meta
    - foam
    - static
    - other
---
"0":
    T:
        FoamFile: &FoamFile
            version: 2.0
            format: ascii
            class: volScalarField
            object: T
        "#include": |
            "inputs"
        dimensions: "[0 0 0 1 0 0 0]"
        internalField: uniform $temperature
        boundaryField:
            inlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            outlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            front_and_back:
                type: empty
            vehicle:
                type: zeroGradient
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    U:
        FoamFile:
            class: volVectorField
            object: U
            <<: *FoamFile
        "#include": |
            "inputs"
        dimensions: "[0 1 -1 0 0 0 0]"
        internalField: uniform $speed
        boundaryField:
            inlet:
                type: supersonicFreestream
                pInf: $pressure
                TInf: $temperature
                UInf: $speed
                gamma: 1.4  # Specific heat ratio
                value: $internalField
            outlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            front_and_back:
                type: empty
            vehicle:
                type: fixedValue
                value: uniform (0 0 0)
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    alphat:
        FoamFile:
            class: volScalarField
            object: alphat
            <<: *FoamFile
        dimensions: "[1 -1 -1 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            inlet:
                type: calculated
                value: uniform 0
            outlet:
                type: calculated
                value: uniform 0
            front_and_back:
                type: empty
            vehicle:
                # Boundary condition for turbulent thermal diffusivity when using wall
                # functions.
                type: compressible::alphatWallFunction
                Prt: 0.85  # Turbulent Prandtl number.
                value: uniform 0
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    epsilon:
        FoamFile:
            class: volScalarField
            object: epsilon
            <<: *FoamFile
        "#include": |
            "inputs"
        dimensions: "[0 2 -3 0 0 0 0]"
        internalField: uniform $turbulentEpsilon
        boundaryField:
            inlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            outlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            front_and_back:
                type: empty
            vehicle:
                type: epsilonWallFunction
                # Cmu: 0.09
                # kappa: 0.41
                # E: 9.8
                value: $internalField
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    inputs:
        FoamFile:
            class: volVectorField
            object: U
            <<: *FoamFile
        speed: (825 0 0)  # m/s
        temperature: 270  # Kelvin
        pressure: 76  # Pascals
        turbulentKE: 1000  # k
        turbulentEpsilon: 25000  # epsilon
    k:
        FoamFile:
            class: volScalarField
            object: k
            <<: *FoamFile
        "#include": |
            "inputs"
        dimensions: "[0 2 -2 0 0 0 0]"
        internalField: uniform $turbulentKE
        boundaryField:
            inlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            outlet:
                type: inletOutlet
                inletValue: $internalField
                value: $internalField
            front_and_back:
                type: empty
            vehicle:
                type: kqRWallFunction
                value: $internalField
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    nut:
        FoamFile:
            class: volScalarField
            object: nut
            <<: *FoamFile
        dimensions: "[0 2 -1 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            inlet:
                type: calculated
                value: uniform 0
            outlet:
                type: calculated
                value: uniform 0
            front_and_back:
                type: empty
            vehicle:
                type: nutkWallFunction
                Cmu: 0.09
                kappa: 0.41
                E: 9.8
                value: uniform 0
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
    p:
        FoamFile:
            class: volScalarField
            object: p
            <<: *FoamFile
        "#include": |
            "inputs"
        dimensions: "[1 -1 -2 0 0 0 0]"
        internalField: uniform $pressure
        boundaryField:
            inlet:
                type: zeroGradient
            outlet:
                type: waveTransmissive
                field: p
                phi: phi
                rho: rho
                psi: thermo:psi
                gamma: 1.4
                fieldInf: $pressure
                # lInf: A measure of how far away the far-field condition should be.
                lInf: 0.5
                value: $internalField
            front_and_back:
                type: empty
            vehicle:
                type: zeroGradient
            tunnel:
                type: slip
            wedge0:
                type: wedge
            wedge1:
                type: wedge
constant:
    thermophysicalProperties:
        FoamFile:
            class: dictionary
            object: thermophysicalProperties
            <<: *FoamFile
        thermoType:
            type: hePsiThermo
            mixture: pureMixture
            transport: const
            thermo: hConst
            equationOfState: perfectGas
            specie: specie
            energy: sensibleInternalEnergy
        mixture:
            specie:
                nMoles: 1
                molWeight: 28.9
            thermodynamics:
                Cp: 1005
                Hf: 0
            transport:
                mu: 1.8e-05
                Pr: 0.7
    turbulenceProperties:
        FoamFile:
            class: dictionary
            object: turbulenceProperties
            <<: *FoamFile
        simulationType: RAS
        RAS:
            # RASModel: LaunderSharmaKE
            RASModel: kEpsilon
            turbulence: on
            printCoeffs: on
system:
    changeDictionaryDict:
        FoamFile:
            class: dictionary
            object: changeDictionaryDict
            <<: *FoamFile
        dictionaryReplacement:
            boundary:
                vehicle:
                    type: wall
                    physicalType: wall
                wedge.*:
                    type: wedge
                    physicalType: wedge
                tunnel:
                    type: slip
                    physicalType: slip
    controlDict:
        FoamFile:
            class: dictionary
            object: controlDict
            <<: *FoamFile
        application: sonicFoam
        startFrom: latestTime
        startTime: 0
        stopAt: endTime
        endTime: 0.003
        deltaT: 3e-07
        # writeControl: runTime
        writeControl: timeStep
        # writeInterval: 1e-04
        writeInterval: 100
        purgeWrite: 0
        writeFormat: binary
        writePrecision: 6
        writeCompression: off
        timeFormat: general
        timePrecision: 6
        runTimeModifiable: true
    fvSchemes:
        FoamFile:
            class: dictionary
            object: fvSchemes
            <<: *FoamFile
        ddtSchemes:
            default: Euler
        gradSchemes:
            default: Gauss linear
        divSchemes:
            default: none
            # Default 2nd order
            # div(phi, U): Gauss limitedLinearV 1
            # div(phi, e): Gauss limitedLinear 1
            # div(phid, p): Gauss limitedLinear 1
            # div(phi, K): Gauss limitedLinear 1
            # div(phiv, p): Gauss limitedLinear 1
            # Upwind 1st order
            default: Gauss upwind
            # Upwind 2nd order
            # div(phi, U): Gauss linearUpwind grad(U)
            # div(phi, e): Gauss linearUpwind grad(e)
            # div(phid, p): Gauss linearUpwind grad(p)
            # div(phi, K): Gauss linearUpwind grad(K)
            # div(phiv, p): Gauss linearUpwind grad(p)
            div(phi, k): Gauss upwind
            div(phi, epsilon): Gauss upwind
            div(((rho*nuEff)*dev2(T(grad(U))))): Gauss linear
        laplacianSchemes:
            default: Gauss linear limited corrected 0.5
        interpolationSchemes:
            default: linear
        snGradSchemes:
            default: corrected
    fvSolution:
        FoamFile:
            class: dictionary
            object: fvSolution
            <<: *FoamFile
        solvers:
            rho.*:
                solver: diagonal
            p.*: &p
                solver: PBiCG
                preconditioner: DILU
                tolerance: 1e-12
                relTol: 0
            (U|e).*:
                tolerance: 1e-9
                <<: *p
            (k|epsilon).*:
                tolerance: 1e-10
                <<: *p
        PIMPLE:
            nOuterCorrectors: 1
            nCorrectors: 3
            nNonOrthogonalCorrectors: 2
---
-
    name: mesh.geo
    type: [embed, text]
    permission: null
    data: |
        //Inputs
        vehicle_diameter = 0.198;
        vehicle_diameter_back = 0.08106;
        vehicle_length = 0.130;
        tube_diameter = 10*vehicle_diameter;
        tube_length = 10*vehicle_diameter;

        shield_radius = 0.19;

        vehicle_gridsize = 0.01*vehicle_diameter;
        far_gridsize = 0.02*tube_diameter;

        shock_grid_line_distance = vehicle_diameter/2;
        shock_grid_line_length = vehicle_diameter;

        // Derived variables.
        shield_span = Asin(vehicle_diameter/2 / shield_radius);
        shield_end_distance = (1-Cos(shield_span))*shield_radius;


        ce = 0;
        Point(ce++) = {0,0,0,vehicle_gridsize};e1=ce;
        Point(ce++) = {shield_radius,0,0,vehicle_gridsize};c1 = ce;
        Point(ce++) = {shield_end_distance,vehicle_diameter/2,0,vehicle_gridsize};
        t1=ce;
        Point(ce++) = {vehicle_length,0,0,vehicle_gridsize};e2=ce;
        Point(ce++) = {vehicle_length,vehicle_diameter_back/2,0,vehicle_gridsize};
        t2=ce;
        Point(ce++) = {-tube_length/2+vehicle_length/2,0,0,far_gridsize};i1=ce;
        Point(ce++) = {tube_length/2+vehicle_length/2,0,0,far_gridsize};o1=ce;
        Point(ce++) = {-tube_length/2+vehicle_length/2,tube_diameter/2,0,far_gridsize};
        i2=ce;
        Point(ce++) = {tube_length/2+vehicle_length/2,tube_diameter/2,0,far_gridsize};
        o2=ce;

        // Function direction
        //   // In: p1=; p2=;
        //   // Out: direction[] = {};
        //   c1[] = Boundary{Point{p1};};
        //   c2[] = Boundary{Point{p2};};
        //   direction[] = {c2[0]-c1[0],c2[1]-c1[1],0};
        // Return

        // p1 = t1;
        // p2 = t2;
        // Call direction;
        // c1[] = Boundary{Point{t1};};
        // Point(ce++) = {};


        lns[]={};
        Line(ce++) = {i1,e1};lns[]+=ce;
        Circle(ce++) = {e1,c1,t1};lns[]+=ce;front_arc = ce;
        Line(ce++) = {t1,t2};lns[]+=ce;
        Line(ce++) = {t2,e2};lns[]+=ce;
        Line(ce++) = {e2,o1};lns[]+=ce;
        Line(ce++) = {o1,o2};lns[]+=ce;
        Line(ce++) = {o2,i2};lns[]+=ce;
        Line(ce++) = {i2,i1};lns[]+=ce;


        // // Grid field
        Field[1] = Attractor;
        // Field[1].NodesList = {e1};
        Field[1].NNodesByEdge = 100;
        Field[1].EdgesList = {front_arc};
        Field[2] = Threshold;
        Field[2].IField = 1;
        Field[2].LcMin = vehicle_gridsize;
        Field[2].LcMax = far_gridsize;
        Field[2].DistMin = 0.4*vehicle_diameter;
        Field[2].DistMax = 1*vehicle_diameter;
        Field[7] = Min;
        Field[7].FieldsList = {2};
        Background Field = 7;

        Line Loop(ce++) = lns[];

        Plane Surface(ce++) = ce-1;surf=ce;

        // Point(ce++) = {-shock_grid_line_distance, 0.001, 0, vehicle_gridsize};
        // spt1 = ce;
        // Point(ce++) = {-shock_grid_line_distance, shock_grid_line_length, 0,
        //     vehicle_gridsize}; spt2 = ce;
        // Line(ce++) = {spt1, spt2}; sln = ce;
        // Point{spt2} In Surface{surf};

        Rotate {{1,0,0},{0,0,0},2.5*Pi/180.0}
        {
            Surface{surf};
        }
        new_entities[] = Extrude {{1,0,0},{0,0,0},-5*Pi/180.0}
        {
            Surface{surf};
            Layers{1};
            Recombine;
        };

        Physical Surface("vehicle") = {new_entities[{2:4}]};
        Physical Surface("tunnel") = {new_entities[6]};
        Physical Surface("outlet") = {new_entities[5]};
        Physical Surface("inlet") = {new_entities[7]};
        Physical Surface("wedge0") = {surf};
        Physical Surface("wedge1") = {new_entities[0]};

        Physical Volume("volume") = {new_entities[1]};
---
pipeline:
    - gmsh mesh.geo -3 -o test.msh
    - gmshToFoam test.msh
    - changeDictionary
    - __app__
