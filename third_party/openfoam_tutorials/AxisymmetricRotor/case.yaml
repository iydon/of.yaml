---
openfoam: [4.x]
version: 0.11.0
order:
    - meta
    - foam
    - static
    - other
---
"0":
    k:
        FoamFile: &FoamFile
            version: 2.0
            format: ascii
            class: volScalarField
            object: k
        kInlet: 0.02
        dimensions: "[0 2 -2 0 0 0 0]"
        internalField: uniform $kInlet
        boundaryField:
            inlet:
                type: fixedValue
                value: uniform $kInlet
            outlet:
                type: inletOutlet
                inletValue: uniform $kInlet
                value: uniform $kInlet
            wedge.*:
                type: wedge
            tunnel:
                type: slip
            "#includeEtc": >
                "caseDicts/setConstraintTypes"
    nut:
        FoamFile:
            class: volScalarField
            object: nut
            <<: *FoamFile
        dimensions: "[0 2 -1 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            inlet:
                type: calculated
                value: uniform 0
            outlet:
                type: calculated
                value: uniform 0
            wedge.*:
                type: wedge
            tunnel:
                type: slip
            "#includeEtc": >
                "caseDicts/setConstraintTypes"
    omega:
        FoamFile:
            class: volScalarField
            object: omega
            <<: *FoamFile
        omegaInlet: 10.0
        dimensions: "[0 0 -1 0 0 0 0]"
        internalField: uniform $omegaInlet
        boundaryField:
            inlet:
                type: fixedValue
                value: uniform $omegaInlet
            outlet:
                type: inletOutlet
                inletValue: uniform $omegaInlet
                value: uniform $omegaInlet
            wedge.*:
                type: wedge
            tunnel:
                type: slip
            "#includeEtc": >
                "caseDicts/setConstraintTypes"
    p:
        FoamFile:
            class: volScalarField
            object: p
            <<: *FoamFile
        dimensions: "[0 2 -2 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            inlet:
                type: zeroGradient
                # type: fixedValue
                # value: uniform 0
            outlet:
                type: fixedValue
                value: uniform 0
            wedge.*:
                type: wedge
            tunnel:
                type: slip
            "#includeEtc": >
                "caseDicts/setConstraintTypes"
    U:
        FoamFile:
            class: volVectorField
            object: U
            <<: *FoamFile
        Uinlet: (0 -2 0)
        dimensions: "[0 1 -1 0 0 0 0]"
        internalField: uniform $Uinlet
        boundaryField:
            inlet:
                type: fixedValue
                value: uniform $Uinlet
            outlet:
                type: pressureInletOutletVelocity
                value: uniform $Uinlet
            wedge.*:
                type: wedge
            tunnel:
                type: slip
            "#includeEtc": >
                "caseDicts/setConstraintTypes"
constant:
    transportProperties:
        FoamFile:
            class: dictionary
            object: transportProperties
            <<: *FoamFile
        transportModel: Newtonian
        nu: "[0 2 -1 0 0 0 0] 1.5e-05"
    turbulenceProperties:
        FoamFile:
            class: dictionary
            object: turbulenceProperties
            <<: *FoamFile
        simulationType: RAS
        RAS:
            RASModel: kOmegaSST
            turbulence: on
            printCoeffs: on
system:
    changeDictionaryDict:
        FoamFile:
            class: dictionary
            object: changeDictionaryDict
            <<: *FoamFile
        boundary:
            wedge.*:
                type: wedge
                physicalType: wedge
            tunnel:
                type: slip
                physicalType: slip
    controlDict:
        FoamFile:
            class: dictionary
            object: controlDict
            <<: *FoamFile
        application: simpleFoam
        startFrom: startTime
        startTime: 0
        stopAt: endTime
        endTime: 1000
        deltaT: 1
        writeControl: timeStep
        writeInterval: 50
        purgeWrite: 0
        writeFormat: binary
        writeCompression: off
        timeFormat: general
        timePrecision: 6
        runTimeModifiable: true
    fvOptions:
        FoamFile:
            class: dictionary
            object: fvOptions
            <<: *FoamFile
        disk:
            type: rotorDisk
            active: on
            rotorDiskCoeffs:
                selectionMode: cellZone
                cellZone: rotatingZone
                fields: (U)  # Names of fields on which to apply source
                nBlades: 2  # Number of blades
                tipEffect: 1.0  # Normalised radius above which lift = 0
                # I modified the source to enable opposite rotation (as in a coax configuration)
                # Simply flip sign on rpm to get opposite rotation.
                rpm: 9000
                rhoRef: 1.18
                inletFlowType: local  # Inlet flow type specification
                geometryMode: specified
                origin: (0 0 0)
                axis: (0 1 0)
                refDirection: (1 0 0)  # Reference direction
                                       # - used as reference for psi angle
                trimModel: fixedTrim  # fixed || targetForce
                fixedTrimCoeffs:
                    theta0: 0
                    theta1c: 0
                    theta1s: 0
                flapCoeffs:
                    beta0: 0  # Coning angle [deg]
                    beta1c: 0  # Lateral flapping coeff (cos coeff)
                    beta2s: 0  # Longitudinal flapping coeff (sin coeff)
                blade:
                    data:
                        - (profile1 (0 0 0))
                        - (profile1 (0.0762 25  0.038))
                        - (profile1 (0.2032 5   0.0125))
                        # - (profile1 (0.11 25  0.062))
                        # - (profile1 (0.33 5   0.02))
                profiles:
                    profile1:
                        type: lookup
                        data:
                            - (-90 1.0 0.0)
                            - (-25 1.0 0.0)
                            - (-18 0.21 -1.45)
                            - (-16 0.165 -1.3)
                            - (-14 0.125 -1.1)
                            - (-12 0.092 -0.95)
                            - (-10 0.07 -0.8)
                            - (-8 0.05 -0.64)
                            - (-6 0.04 -0.5)
                            - (-4 0.028 -0.32)
                            - (-2 0.022 -0.18)
                            - (0 0.02 0)
                            - (2 0.022 0.18)
                            - (4 0.028 0.32)
                            - (6 0.04 0.5)
                            - (8 0.05 0.64)
                            - (10 0.07 0.8)
                            - (12 0.092 0.95)
                            - (14 0.125 1.1)
                            - (16 0.165 1.3)
                            - (18 0.21 1.45)
                            - (25 1.0 0.0)
                            - (90 1.0 0.0)
    fvSchemes:
        FoamFile:
            class: dictionary
            object: fvSchemes
            <<: *FoamFile
        ddtSchemes:
            default: steadyState
        gradSchemes:
            default: Gauss linear
            limited: cellLimited Gauss linear 1
            grad(U): $limited
            grad(k): $limited
            grad(omega): $limited
        divSchemes:
            default: none
            # div(phi, U): bounded Gauss upwind
            div(phi, U): bounded Gauss linearUpwind unlimited
            # turbulence: bounded Gauss upwind
            turbulence: bounded Gauss linearUpwind limited
            div(phi, k): $turbulence
            div(phi, omega): $turbulence
            div(phi, epsilon): $turbulence
            div((nuEff*dev(T(grad(U))))): Gauss linear
            div((nuEff*dev2(T(grad(U))))): Gauss linear
        laplacianSchemes:
            default: Gauss linear corrected
        interpolationSchemes:
            default: linear
        snGradSchemes:
            default: corrected
        wallDist:
            method: meshWave
    fvSolution:
        FoamFile:
            class: dictionary
            object: fvSolution
            <<: *FoamFile
        solvers:  # iteration stopping criteria
            p:
                solver: GAMG
                smoother: GaussSeidel
                tolerance: 1e-6
                relTol: 0.1
            (U|k|omega|epsilon):
                solver: smoothSolver
                smoother: symGaussSeidel
                tolerance: 1e-6
                relTol: 0.1
        SIMPLE:  # global stopping criteria
            nNonOrthogonalCorrectors: 1
            consistent: yes
            residualControl:
                U: 1e-4
                p: 1e-3
                (k|epsilon|omega): 1e-2
        relaxationFactors:  # stability criteria
            equations:
                U: 0.65
                (p|k|omega|epsilon): 0.95
---
-
    name: mesh/shaft.geo
    type: [embed, text]
    permission: null
    data: |
        //Inputs
        Geometry.Tolerance = 1e-12;

        rotorRadius = 8*0.0254; // m
        hubRadius = 1*0.0254; // m
        domainDistance = 5; // m

        rotorTipLc = 0.01*rotorRadius;
        rotorCenterLc = 4*rotorTipLc;
        farLc = rotorRadius;

        wedgeAngle = 5*Pi/180;

        Point(1) = {hubRadius, 0, 0, rotorCenterLc};
        Point(2) = {rotorRadius, 0, 0, rotorTipLc};
        Point(3) = {rotorRadius, rotorTipLc, 0, rotorTipLc};
        Point(4) = {hubRadius, rotorTipLc, 0, rotorCenterLc};

        Point(5) = {hubRadius, -domainDistance, 0, farLc};
        Point(6) = {domainDistance, -domainDistance, 0, farLc};
        Point(7) = {domainDistance, domainDistance, 0, farLc};
        Point(8) = {hubRadius, domainDistance, 0, farLc};

        Line(10) = {1, 2};
        Line(11) = {2, 3};
        Line(12) = {3, 4};
        Line(13) = {4, 1};
        Line Loop(20) = {10:13};

        Transfinite Line{11,13} = 2;

        Line(14) = {4, 8};
        Line(15) = {8, 7};
        Line(16) = {7, 6};
        Line(17) = {6, 5};
        Line(18) = {5, 1};
        Line Loop(19) = {10:12,14:18};

        Plane Surface(22) = {19};
        Plane Surface(23) = {20};
        Transfinite Surface{23};
        Recombine Surface{23};

        Rotate {{0,1,0}, {0,0,0}, wedgeAngle/2}
        {
            Surface{22, 23};
        }
        domainEntities[] = Extrude {{0,1,0}, {0,0,0}, -wedgeAngle}
        {
            Surface{22,23};
            Layers{1};
            Recombine;
        };

        Physical Surface("wedge0") = {22, 23};
        Physical Surface("wedge1") = {domainEntities[{0, 10}]};
        Physical Surface("inlet") = {domainEntities[6]};
        Physical Surface("tunnel") = {domainEntities[{5, 7, 9, 15}]};
        Physical Surface("outlet") = {domainEntities[8]};

        Physical Volume("rotatingZone") = {domainEntities[11]};
        Physical Volume(1000) = {domainEntities[1]};
-
    name: mesh/wedge.geo
    type: [embed, text]
    permission: null
    data: |
        //Inputs
        Geometry.Tolerance = 1e-12;

        rotorRadius = 8*0.0254; // m
        domainDistance = 25*rotorRadius; // m

        rotorTipLc = 0.01*rotorRadius;
        rotorCenterLc = 4*rotorTipLc;
        farLc = 1.5*rotorRadius;

        wedgeAngle = 5*Pi/180;

        Point(1) = {0, 0, 0, rotorCenterLc};
        Point(2) = {rotorRadius, 0, 0, rotorTipLc};
        Point(3) = {rotorRadius, rotorTipLc, 0, rotorTipLc};
        Point(4) = {0, rotorTipLc, 0, rotorCenterLc};

        Point(5) = {0, -domainDistance, 0, farLc};
        Point(6) = {domainDistance, -domainDistance, 0, farLc};
        Point(7) = {domainDistance, domainDistance, 0, farLc};
        Point(8) = {0, domainDistance, 0, farLc};

        Line(10) = {1, 2};
        Line(11) = {2, 3};
        Line(12) = {3, 4};
        Line(13) = {4, 1};
        Line Loop(20) = {10:13};

        Transfinite Line{11,13} = 2;

        Line(14) = {4, 8};
        Line(15) = {8, 7};
        Line(16) = {7, 6};
        Line(17) = {6, 5};
        Line(18) = {5, 1};
        Line Loop(19) = {10:12,14:18};

        Plane Surface(22) = {19};
        Plane Surface(23) = {20};
        Transfinite Surface{23};
        Recombine Surface{23};

        Rotate {{0,1,0}, {0,0,0}, wedgeAngle/2}
        {
            Surface{22, 23};
        }
        domainEntities[] = Extrude {{0,1,0}, {0,0,0}, -wedgeAngle}
        {
            Surface{22,23};
            Layers{1};
            Recombine;
        };

        Physical Surface("wedge0") = {22, 23};
        Physical Surface("wedge1") = {domainEntities[{0, 8}]};
        Physical Surface("inlet") = {domainEntities[5]};
        Physical Surface("tunnel") = {domainEntities[6]};
        Physical Surface("outlet") = {domainEntities[7]};

        Physical Volume("rotatingZone") = {domainEntities[9]};
        Physical Volume(1000) = {domainEntities[1]};
---
pipeline:
    - gmsh -3 mesh/wedge.geo
    - gmshToFoam mesh/wedge.msh
    - changeDictionary
    - __app__
