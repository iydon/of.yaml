---
openfoam: [7]
version: 0.11.0
order:
    - meta
    - foam
    - static
    - other
---
"0":
    p.orig:
        FoamFile: &FoamFile
            version: 2.0
            format: ascii
            class: volScalarField
            object: p
        dimensions: "[0 2 -2 0 0 0 0]"
        internalField: uniform 0
        boundaryField:
            down:
                type: symmetryPlane
            right:
                type: fixedValue
                value: uniform 0
            up:
                type: symmetryPlane
            left:
                type: zeroGradient
            cylinder:
                type: symmetry
            defaultFaces:
                type: empty
    U.orig:
        FoamFile:
            class: volVectorField
            object: U
            <<: *FoamFile
        dimensions: "[0 1 -1 0 0 0 0]"
        internalField: uniform (0 0 0)
        boundaryField:
            down:
                type: symmetryPlane
            right:
                type: zeroGradient
            up:
                type: symmetryPlane
            left:
                type: uniformFixedValue
                uniformValue: constant (1 0 0)
            cylinder:
                type: symmetry
            defaultFaces:
                type: empty
system:
    blockMeshDict:
        FoamFile:
            class: dictionary
            object: blockMeshDict
            <<: *FoamFile
        convertToMeters: 1
        vertices: |
            #codeStream
            {
                codeInclude
                #{
                    #include "pointField.H"
                #};

                code
                #{
                    pointField points(19);
                    points[0]  = point(0.5, 0, -0.5);
                    points[1]  = point(1, 0, -0.5);
                    points[2]  = point(2, 0, -0.5);
                    points[3]  = point(2, 0.707107, -0.5);
                    points[4]  = point(0.707107, 0.707107, -0.5);
                    points[5]  = point(0.353553, 0.353553, -0.5);
                    points[6]  = point(2, 2, -0.5);
                    points[7]  = point(0.707107, 2, -0.5);
                    points[8]  = point(0, 2, -0.5);
                    points[9]  = point(0, 1, -0.5);
                    points[10] = point(0, 0.5, -0.5);
                    points[11] = point(-0.5, 0, -0.5);
                    points[12] = point(-1, 0, -0.5);
                    points[13] = point(-2, 0, -0.5);
                    points[14] = point(-2, 0.707107, -0.5);
                    points[15] = point(-0.707107, 0.707107, -0.5);
                    points[16] = point(-0.353553, 0.353553, -0.5);
                    points[17] = point(-2, 2, -0.5);
                    points[18] = point(-0.707107, 2, -0.5);

                    // Duplicate z points
                    label sz = points.size();
                    points.setSize(2*sz);
                    for (label i = 0; i < sz; i++)
                    {
                        const point& pt = points[i];
                        points[i+sz] = point(pt.x(), pt.y(), -pt.z());
                    }

                    os  << points;
                #};
            }
        blocks:
            - hex (5 4 9 10 24 23 28 29) (10 10 1) simpleGrading (1 1 1)
            - hex (0 1 4 5 19 20 23 24) (10 10 1) simpleGrading (1 1 1)
            - hex (1 2 3 4 20 21 22 23) (20 10 1) simpleGrading (1 1 1)
            - hex (4 3 6 7 23 22 25 26) (20 20 1) simpleGrading (1 1 1)
            - hex (9 4 7 8 28 23 26 27) (10 20 1) simpleGrading (1 1 1)
            - hex (15 16 10 9 34 35 29 28) (10 10 1) simpleGrading (1 1 1)
            - hex (12 11 16 15 31 30 35 34) (10 10 1) simpleGrading (1 1 1)
            - hex (13 12 15 14 32 31 34 33) (20 10 1) simpleGrading (1 1 1)
            - hex (14 15 18 17 33 34 37 36) (20 20 1) simpleGrading (1 1 1)
            - hex (15 9 8 18 34 28 27 37) (10 20 1) simpleGrading (1 1 1)
        edges:
            - arc 0 5 (0.469846 0.17101 -0.5)
            - arc 5 10 (0.17101 0.469846 -0.5)
            - arc 1 4 (0.939693 0.34202 -0.5)
            - arc 4 9 (0.34202 0.939693 -0.5)
            - arc 19 24 (0.469846 0.17101 0.5)
            - arc 24 29 (0.17101 0.469846 0.5)
            - arc 20 23 (0.939693 0.34202 0.5)
            - arc 23 28 (0.34202 0.939693 0.5)
            - arc 11 16 (-0.469846 0.17101 -0.5)
            - arc 16 10 (-0.17101 0.469846 -0.5)
            - arc 12 15 (-0.939693 0.34202 -0.5)
            - arc 15 9 (-0.34202 0.939693 -0.5)
            - arc 30 35 (-0.469846 0.17101 0.5)
            - arc 35 29 (-0.17101 0.469846 0.5)
            - arc 31 34 (-0.939693 0.34202 0.5)
            - arc 34 28 (-0.34202 0.939693 0.5)
        boundary:
            - down:
              type: symmetryPlane
              faces:
                - (0 1 20 19)
                - (1 2 21 20)
                - (12 11 30 31)
                - (13 12 31 32)
            - right:
              type: patch
              faces:
                - (2 3 22 21)
                - (3 6 25 22)
            - up:
              type: symmetryPlane
              faces:
                - (7 8 27 26)
                - (6 7 26 25)
                - (8 18 37 27)
                - (18 17 36 37)
            - left:
              type: patch
              faces:
                - (14 13 32 33)
                - (17 14 33 36)
            - cylinder:
              type: symmetry
              faces:
                - (10 5 24 29)
                - (5 0 19 24)
                - (16 10 29 35)
                - (11 16 35 30)
        mergePatchPairs: []
    controlDict:
        FoamFile:
            class: dictionary
            object: controlDict
            <<: *FoamFile
        application: potentialFoam
        startFrom: latestTime
        startTime: 0
        stopAt: nextWrite
        endTime: 1
        deltaT: 1
        writeControl: timeStep
        writeInterval: 1
        purgeWrite: 0
        writeFormat: ascii
        writePrecision: 6
        writeCompression: off
        timeFormat: general
        timePrecision: 6
        runTimeModifiable: true
        functions:
            error:
                # Load the library containing the 'coded' functionObject
                libs: ("libutilityFunctionObjects.so")
                type: coded
                # Name of on-the-fly generated functionObject
                name: error
                codeEnd: |
                    #{
                        // Lookup U
                        Info << "Looking up field U\n" << endl;
                        const volVectorField& U = mesh().lookupObject<volVectorField>("U");

                        Info << "Reading inlet velocity uInfX\n" << endl;

                        scalar ULeft = 0.0;
                        label leftI = mesh().boundaryMesh().findPatchID("left");
                        const fvPatchVectorField& fvp = U.boundaryField()[leftI];
                        if (fvp.size())
                        {
                            ULeft = fvp[0].x();
                        }
                        reduce(ULeft, maxOp<scalar>());

                        dimensionedScalar uInfX
                        (
                            "uInfx",
                            dimensionSet(0, 1, -1, 0, 0),
                            ULeft
                        );

                        Info << "U at inlet = " << uInfX.value() << " m/s" << endl;

                        scalar magCylinder = 0.0;
                        label cylI = mesh().boundaryMesh().findPatchID("cylinder");
                        const fvPatchVectorField& cylFvp = mesh().C().boundaryField()[cylI];
                        if (cylFvp.size())
                        {
                            magCylinder = mag(cylFvp[0]);
                        }
                        reduce(magCylinder, maxOp<scalar>());

                        dimensionedScalar radius
                        (
                            "radius",
                            dimensionSet(0, 1, 0, 0, 0),
                            magCylinder
                        );

                        Info << "Cylinder radius = " << radius.value() << " m" << endl;

                        volVectorField UA
                        (
                            IOobject
                            (
                                "UA",
                                mesh().time().timeName(),
                                U.mesh(),
                                IOobject::NO_READ,
                                IOobject::AUTO_WRITE
                            ),
                            U
                        );

                        Info << "\nEvaluating analytical solution" << endl;

                        const volVectorField& centres = UA.mesh().C();
                        volScalarField magCentres(mag(centres));
                        volScalarField theta(acos((centres & vector(1, 0, 0))/magCentres));

                        volVectorField cs2theta
                        (
                            cos(2*theta)*vector(1, 0, 0)
                        + sin(2*theta)*vector(0, 1, 0)
                        );

                        UA = uInfX*(dimensionedVector(vector(1, 0, 0))
                        - pow((radius/magCentres), 2)*cs2theta);

                        // Force writing of UA (since time has not changed)
                        UA.write();

                        volScalarField error("error", mag(U-UA)/mag(UA));

                        Info <<"Writing relative error in U to " << error.objectPath()
                            << endl;

                        error.write();
                    #}
    fvSchemes:
        FoamFile:
            class: dictionary
            object: fvSchemes
            <<: *FoamFile
        ddtSchemes:
            default: steadyState
        gradSchemes:
            default: leastSquares
        divSchemes:
            default: none
            div(phi, U): bounded Gauss linear
            div(div(phi, U)): Gauss linear
        laplacianSchemes:
            default: Gauss linear corrected
        interpolationSchemes:
            default: linear
        snGradSchemes:
            default: corrected
    fvSolution:
        FoamFile:
            class: dictionary
            object: fvSolution
            <<: *FoamFile
        solvers:
            Phi: &Phi
                solver: GAMG
                smoother: DIC
                tolerance: 1e-06
                relTol: 0.01
            p:
                <<: *Phi
        potentialFlow:
            nNonOrthogonalCorrectors: 3
---
-
    name: Allrun
    type: [embed, text]
    permission: 777
    data: |
        #!/bin/sh
        cd ${0%/*} || exit 1    # Run from this directory

        # Source tutorial run functions
        . $WM_PROJECT_DIR/bin/tools/RunFunctions

        application=$(getApplication)

        runApplication blockMesh
        runApplication $application -withFunctionObjects -writePhi -writep
        runApplication postProcess -func streamFunction
-
    name: Allclean
    type: [embed, text]
    permission: 777
    data: |
        #!/bin/sh
        cd ${0%/*} || exit 1    # Run from this directory

        # Source tutorial clean functions
        . $WM_PROJECT_DIR/bin/tools/CleanFunctions

        find 0 -type f  ! -name "*.*" -delete > /dev/null 2>&1

        cleanCase
---
pipeline:
    - blockMesh
    - __app__ -withFunctionObjects -writePhi -writep
    - postProcess -func streamFunction
